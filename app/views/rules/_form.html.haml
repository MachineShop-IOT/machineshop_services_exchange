.span9
  %h1 New Rule
  = form_tag(rules_path, :method => 'post') do

    %div#rule_basics
      / Description, device/device_instances, condition_type
      %div
        /= hidden_field_tag :device_properties, @device_properties # json used for populating dropdowns
        = hidden_field_tag :device_device_instances, @device_device_instances
        = hidden_field_tag :join_rule_conditions, @join_rule_conditions
        = hidden_field_tag :comparison_rule_conditions, @comparison_rule_conditions
        = hidden_field_tag :rule_json

      %div
        .form_label
          = label_tag :description
        .form_field
          = text_field_tag 'description', nil, required: true, class: "input-block-level"

      %div#device_selection

        = radio_button_tag('device_selection', 'rule_devices', true)
        Create for all devices of a type.
        %br
        = radio_button_tag('device_selection', 'rule_device_instances', false)
        Create for a specific device instance.
        %br
        %br
      %div#rule_devices
        .form_label
          = label_tag :device_type
        .form_field
          %select.custom-select#device_ids.input-block-level
            - @devices.each do |d|
              %option{:value => d[:_id]}
                = d[:name]
      %div#rule_device_instances
        .form_label
          = label_tag :device_instance_name
        .form_field
          %select.custom-select#device_instance_ids.input-block-level
            - @device_instances.each do |di|
              %option{:value => di[:_id]}
                = di[:name]
      %div
        .form_label
          = label_tag "What type of condition should this rule have?"
        %div#rule_condition_selector.form_field
          = select(:rule_condition, :_type, [['A few conditions that must all be true.', 'and_rule_condition'],['A few conditions where only one must be true.', 'or_rule_condition'], ['A condition that should not be true.', 'not_rule_condition'], ['A value should be equal to a threshold.', 'equal_rule_condition'], ['A value should be greater than a threshold.', 'greater_than_rule_condition'], ['A value should be greater than or equal to a threshold.', 'greater_than_equal_rule_condition'], ['A value should be less than a threshold.', 'less_than_rule_condition'], ['A value should be less than or equal to a threshold.', 'less_than_equal_rule_condition'], ['Device location relative to a fixed point.','near_rule_condition']])
        %br

    %div#condition_attributes

    %div#sub_conditions
    / Specify sub conditions for joining conditions at the top level.
    %div#then_actions
      / Create all the then_actions for the rule.
      Do this if the rule condition is met:
    %div#else_actions
      / Create all the actions that happen if the condition is not met.
      Do this if the rule condition is not met:

    %div#confirmation
      / Show how the rule would read in plain English (hopefully).
    %br
      / = @rule
    .form-actions#rule-actions
      = link_to '<< Back', 'javascript:void(0)', :onclick => 'RuleWizardBack()', :class => 'btn back-btn btn-custom'
      = link_to "Next >>", 'javascript:void(0)', :onclick => 'RuleWizardNext()', :class => 'btn next-btn btn-custom'

      %button.sbt-btn.btn.btn-custom(type='submit') Submit
      = link_to 'Cancel', dashboard_path, :class => "btn btn-custom"
